<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Homelab on Austin Barnes</title><link>https://www.cinderblook.com/categories/homelab/</link><description>Recent content in Homelab on Austin Barnes</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>&lt;a href="https://creativecommons.org/licenses/by-nc/4.0/" target="_blank" rel="noopener">CC BY-NC 4.0&lt;/a></copyright><lastBuildDate>Thu, 14 Apr 2022 00:00:00 +0000</lastBuildDate><atom:link href="https://www.cinderblook.com/categories/homelab/index.xml" rel="self" type="application/rss+xml"/><item><title>Terraform - Proxmox-VM-Deploy</title><link>https://www.cinderblook.com/projects/terraform-proxmox-vm-deploy/</link><pubDate>Thu, 14 Apr 2022 00:00:00 +0000</pubDate><guid>https://www.cinderblook.com/projects/terraform-proxmox-vm-deploy/</guid><description>Overview Using Terraform to deploy virtual machines in Proxmox. This is designed with Proxmox Virtual Environment version 7.1 in mind.
Check out all of the configuration files on GitHub at the repository!
Purpose I have a Proxmox server in my homelab, and wanted to have an easier way to spin up virtual machines on an as needed basis.
Prequisites Have a Proxmox server Have a template made on Proxmox, in my case, I used Ubuntu Server 20.</description></item><item><title>K3S - Highly-Available-Rancher</title><link>https://www.cinderblook.com/projects/k3s-highly-available-rancher/</link><pubDate>Sun, 06 Mar 2022 00:00:00 +0000</pubDate><guid>https://www.cinderblook.com/projects/k3s-highly-available-rancher/</guid><description>Overview Getting started with K3S: The primary goal here is to setup a functional highly available K3S cluster. This will include 4 necessary steps:
Setup NGINX Loadbalancer Docker Setup MySQL Docker Setup Highly Available K3s Cluster (Optional) Setup management from dev machine (Controller) Setup Rancher as a container within the cluster Check out all of the configuration files on GitHub at the repository!
Prerequisites Have a dedicated Docker host virtual machine, preferrably linux Have 5 Linux virtual machines ready Two will be Master Nodes, and Three will be worker nodes.</description></item><item><title>Terraform - vSphere-WinServ-Deployment</title><link>https://www.cinderblook.com/projects/terraform-vsphere-winserv-deployment/</link><pubDate>Mon, 14 Feb 2022 00:00:00 +0000</pubDate><guid>https://www.cinderblook.com/projects/terraform-vsphere-winserv-deployment/</guid><description>Overview The goal of this project is to deploy a ready-to-go windows server environment. This includes a domain controller, a replica domain controller, a DHCP server, and a fileserver. Additionally setting up users, groups, and OUs for the respective users within the domain. To complete this project, 3 steps are taken.
Use Packer to spin up a sys prepped and fully updated windows server 2022 iso for the environemnt Use Terraform to deploy 4 virtual machines into a vSphere environment Use Ansible to configure these 4 virtual machines as desired Check out all of the configuration files on GitHub at the repository!</description></item></channel></rss>